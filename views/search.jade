doctype html
html(lang="en")
  head
    title= title
    meta(name="viewport", content="width=device-width")
    script(src="/static/mnemonic.js")
    link(rel="stylesheet", href="/static/style.css")
    style.
      body {
        max-width: 100%;
      }
      .hidden {
        display: none;
      }
      #results {
        table-layout: fixed;
        width: 100%;
      }
      #results td {
        padding: 0.5em;
        vertical-align: top;
      }
      #results td:first-child {
        width: 11em;
      }
  body
    h1
      a(href="/") bugwords!
    form(action="/search", method="GET")
      p
        label(for="q") Search:
        input#q(name="quicksearch", value=q, placeholder="You can use quicksearch syntax like \"@mbrubeck\"")
        input(type="Submit" value="Go")
        |  (
        a(href="https://bugzilla.mozilla.org/page.cgi?id=quicksearch.html") help
        | )
    p#loading.hidden Loading...
    p#noresults.hidden No results
    table#results
    hr
    #footer
      p.
        Tip: You can turn a regular bugzilla.mozilla.org search into a bugwd
        search by replacing "https://bugzilla.mozilla.org" with
        "http://bugwd.com" in the address.
      p.
        In Firefox, right-click on the search box and "Add a keyword for this
        search" if you want to use bugwords to search from your address bar!
      hr
      p
        | made by 
        a(href="http://limpet.net/mbrubeck") Matt Brubeck 
        | â€¢ 
        a(href="http://github.com/mbrubeck/bugwd")  source code
    script.
      "use strict";
      var prefix = "http://bugwd.com/";
      var api = "https://bugzilla.mozilla.org/rest/bug";
      var extra = "&include_fields=id,summary&limit=400";

      function search(query) {
        var url = api + query + extra;
        var loading = document.getElementById("loading");
        noresults.classList.add("hidden");
        loading.classList.remove("hidden");

        var req = new XMLHttpRequest();
        req.open("get", url, true);
        req.setRequestHeader("Accept", "application/json");
        req.onload = function() {
          loading.classList.add("hidden");
          var result = JSON.parse(this.responseText);
          if (result.bugs && result.bugs.length) {
            render(result.bugs);
          } else {
            noresults.classList.remove("hidden");
          }
        };
        req.send();
      }

      function render(bugs) {
        var frag = document.createDocumentFragment();
        bugs.forEach(function(bug) {
          var tr = document.createElement("tr");
          frag.appendChild(tr);
          var td = document.createElement("td");
          tr.appendChild(td);

          var words = mnemonic.encode_int32(+bug.id);
          var url = prefix + words;
          var link = document.createElement("a");
          link.setAttribute("href", url);
          link.textContent = words;
          td.appendChild(link);

          td = document.createElement("td");
          td.textContent = "Bug " + bug.id + " - " + bug.summary;
          tr.appendChild(td);
        });
        document.getElementById("results").appendChild(frag);
      }

      var query = location.search;
      if (query) {
        search(query);
      }
